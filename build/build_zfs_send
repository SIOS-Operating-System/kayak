#!/bin/bash
#
# {{{ CDDL HEADER
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
# }}}

# Copyright 2017 OmniTI Computer Consulting, Inc. All rights reserved.
# Copyright 2020 OmniOS Community Edition (OmniOSce) Association.
#

fail() {
    echo $*
    exit 1
}

note() {
    echo "***"
    echo "*** $*"
    echo "***"
}

MYDIR=$PWD/`dirname $BASH_SOURCE[0]`

PUBLISHER=omnios
OMNIOS_URL=https://pkg.omniosce.org/r151036/core
: ${PKGURL:=$OMNIOS_URL}
ZROOT=rpool
OUT=
CLEANUP=0
VARIANT=global
set -- `getopt cd:o:p:V: $*`
for i in $*
do
    case $i in
        -c) CLEANUP=1; shift ;;
        -d) ZROOT=$2; shift 2;;
        -o) OUT=$2; shift 2;;
        -p) PROFILE=$2; shift 2;;
        -P) PUBLISHER_OVERRIDE=1; shift ;;
        -V) VARIANT=$2; shift 2;;
        --) shift; break ;;
    esac
done

name=$1
if [ -z "$name" ]; then
    echo "$0 [-cP] [-d zfsparent] [-p profile] [-o outputfile] <release_name>"
    exit
fi

MPR=`zfs get -H mountpoint $ZROOT | awk '{print $3}'`
if [ -z "$OUT" ]; then
    OUT=$MPR/kayak_$name.zfs.xz
    [ $VARIANT = nonglobal ] && OUT=$MPR/kayak_$name.ngz.zfs.xz
fi

if zfs list $ZROOT/$name@entire > /dev/null 2>&1; then
    note "Rolling back to last @entire"
    zfs rollback -r $ZROOT/$name@entire
    MP=`zfs get -H mountpoint $ZROOT/$name | awk '{print $3}'`
else
    zfs create $ZROOT/$name || fail "zfs create"
    MP=`zfs get -H mountpoint $ZROOT/$name | awk '{print $3}'`
    note "Creating IPS image"
    pkg image-create -F -p $PUBLISHER=$PKGURL $MP || fail "image-create"
    [ -n "$DEBUG_VARIANT" ] && pkg -R $MP change-variant debug.illumos=true
    entire_version=${name//[a-z]/}
    entire_fmri="entire@11-$entire_version"
    note "Installing $entire_fmri"
    pkg -R $MP install $entire_fmri || fail "install entire"
    zfs snapshot $ZROOT/$name@entire
fi

note "Changing zone variant to $VARIANT"
pkg -R $MP change-variant opensolaris.zone=$VARIANT

note "Installing optional packages"
typeset -a optlist=
while read p v; do
        [ -n "$v" -a "$v" != "$VARIANT" ] && continue
        echo "++++ $p"
        optlist+=($p)
done < <(pkg -R $MP contents -H -a type=optional \
    -o fmri,variant.opensolaris.zone $entire_fmri)

# Install system/rsyslog - it is the default log daemon from r151035
optlist+=(system/rsyslog)

pkg -R $MP install ${optlist[*]} || fail "install optional entire"

if [ -n "$PROFILE" ]; then
    note "Applying custom profile: $PROFILE"
    [ -r "$PROFILE" ] || fail "Cannot find file: $PROFILE"
    while read line; do
        TMPPUB=`echo $line | cut -f1 -d=`
        TMPURL=`echo $line | cut -f2 -d=`
        if [ -n "$TMPURL" -a "$TMPURL" != "$TMPPUB" ]; then
            note "Setting publisher: $TMPPUB / $TMPURL"
            pkg -R $MP set-publisher -g $TMPURL $TMPPUB \
                || fail "set publisher $TMPPUB"
            PUBLISHER=$TMPPUB
            PKGURL=$TMPURL
        else
            note "Installing additional package: $line"
            pkg -R $MP install -g $PKGURL $line || fail "install $line"
        fi
    done < <(grep . $PROFILE | grep -v '^ *#')
fi

if [ -n "$PUBLISHER_OVERRIDE" ]; then
    OMNIOS_URL=$PKGURL
fi
note "Setting omnios publisher to $OMNIOS_URL"
pkg -R $MP unset-publisher omnios
pkg -R $MP set-publisher -P --no-refresh -O $OMNIOS_URL omnios

# Starting with r151014, require signatures for the omnios publishers.
if [[ $OMNIOS_URL != */bloody/* ]]; then
    note "Setting signature policy to require."
    for pub in omnios; do
        pkg -R $MP set-publisher \
            --set-property signature-policy=require-signatures $pub
    done
fi

pkg -R $MP purge-history

function seed_smf
{
    typeset variant="${1:-global}"

    note "Seeding SMF database ($variant)"

    [ -x "$PREBUILT_ILLUMOS/usr/src/cmd/svc/svccfg/svccfg-native" ] \
        && SVCCFG="${PREBUILT_ILLUMOS}/usr/src/cmd/svc/svccfg/svccfg-native" \
        || SVCCFG=/usr/sbin/svccfg
    SVCCFG_DTD=$MP/usr/share/lib/xml/dtd/service_bundle.dtd.1
    SVCCFG_REPOSITORY=/tmp/kayak.svc.$$
    SVCCFG_CHECKHASH=1
    export SVCCFG_DTD SVCCFG_REPOSITORY SVCCFG_CHECKHASH

    cp $MP/lib/svc/seed/$variant.db $SVCCFG_REPOSITORY || fail "seed $variant"
    chmod 0600 $SVCCFG_REPOSITORY
    chown root:sys $SVCCFG_REPOSITORY
    PKG_INSTALL_ROOT=$MP $SVCCFG import -p /dev/stdout $MP/lib/svc/manifest

    cp -p $SVCCFG_REPOSITORY $MP/etc/svc/repository.db
    rm -f $SVCCFG_REPOSITORY
    unset SVCCFG_DTD SVCCFG_REPOSITORY SVCCFG_CHECKHASH
}

############################################################################

seed_smf $VARIANT

if [ "$VARIANT" = nonglobal ]; then
    PROFILEDIR=etc/svc/profile
    ln -s ns_files.xml $MP/$PROFILEDIR/name_service.xml
    ln -s generic_limited_net.xml $MP/$PROFILEDIR/generic.xml
    ln -s inetd_generic.xml $MP/$PROFILEDIR/inetd_services.xml
    ln -s platform_none.xml $MP/$PROFILEDIR/platform.xml
    # Set a blank password for root (to enable zlogin to zone)
    sed -i -e 's%^root::%root:$5$kr1VgdIt$OUiUAyZCDogH/uaxH71rMeQxvpDEY2yX.x0ZQRnmeb9:%' $MP/etc/shadow
fi

note "Creating compressed stream"
zfs snapshot $ZROOT/$name@kayak || fail "snap"
zfs send $ZROOT/$name@kayak | pv | xz -T0 -9c > $OUT || fail "send/compress"
xz -l $OUT

############################################################################
# Also build .p5p files for various VM environments

if [ $VARIANT = global ]; then
    $MYDIR/build_extra_p5p -d $MPR -o $PKGURL
fi

############################################################################

if [ "$CLEANUP" -eq "1" ]; then
    zfs destroy -r $ZROOT/$name || fail "could not remove zfs filesystem"
fi

# Vim hints
# vim:ts=4:sw=4:et:fdm=marker
