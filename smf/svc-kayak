#!/usr/bin/python3
#
# {{{ CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License, Version 1.0 only
# (the "License").  You may not use this file except in compliance
# with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END }}}
#
# Copyright 2012 OmniTI Computer Consulting, Inc.  All rights reserved.
# Copyright 2022 OmniOS Community Edition (OmniOSce) Association.
#

import os.path
import re
import time
from optparse import OptionParser

import pkg.site_paths
pkg.site_paths.init()
import cherrypy
from cherrypy.process.plugins import DropPrivileges
from cherrypy.lib.static import serve_file

class Root:
    exposed = True
    def __init__(self, options):
        self.options = options

    def GET(self):
        cherrypy.response.headers['Content-Type'] = 'text/html'
        html = """
<html>
    <head>
        <title>Kayak Installation Server</title>
        <link rel="stylesheet" href="css/land.css" type="text/css">
    </head>
    <body>
        <div id="kayak" class="clearfix">
            <div id="col_a">
                <div id="logo_medium"></div>
            </div>
            <div id="col_b">
                <h1>Kayak Installation Server</h1>
                <div class="images">
                    <h2>Available Images</h2>
                    <ul>
        """
        for dirname, dirnames, filenames in os.walk(
          os.path.join(options.basedir, 'kayak')):
            for filename in filenames:
                imagename = re.search("^(.+)\.zfs\.(?:xz|bz2|gz)", filename)
                if imagename == None: continue
                html += ('<li><a href="kayak/' + filename + '">' +
                    imagename.group(1) + '</a></li>\n')
        html += """
                    </ul>
                </div> <!-- images -->
                <div class="configs">
                    <h2>Available Configurations</h2>
                    <ul>
        """
        for dirname, dirnames, filenames in os.walk(
          os.path.join(options.basedir, 'kayak')):
            for filename in filenames:
                imagename = re.search("^[0-9a-fA-F]+$", filename)
                if imagename == None: continue
                html += ('<li><a href="kayak/' + filename + '">' +
                    filename + '</a></li>')
        html += """
                    </ul>
                </div> <!-- configs -->
                <div class="logs">
                    <h2>Installation Logs</h2>
                    <ul>
        """
        logs = []
        for dirname, dirnames, filenames in os.walk(
          os.path.join(options.basedir, 'log')):
            for filename in filenames:
                logs.append(filename)
        for filename in sorted(logs):
            parted = re.match('^([0-9A-Fa-f]{12})\.(\d+)', filename)
            if parted == None: continue
            html += ('<li><a href="kayaklog/' + filename + '">' +
                re.sub('(..)(?=.)', '\\1:', parted.group(1)) +
                ' [' + time.asctime(time.localtime(float(parted.group(2)))) +
                ']</a></li>')

        html += """
                    </ul>
                </div> <!-- logs -->
            </div> <!-- col_b -->
            <div class="footer">
Copyright 2012, OmniTI Computer Consulting, Inc. All rights reserved.
Copyright 2018 OmniOS Community Edition (OmniOSce) Association.
            </div>
        </div>
    </body>
</html>
"""
        return html

class KayakLog(object):
    exposed = True
    def __init__(self, options):
        self.options = options

    def GET(self, file):
        if re.match("\.\.", file) != None:
            raise cherrypy.HTTPError("404 Not Found")
        return serve_file(os.path.join(options.basedir, 'log', file),
                          content_type='text/plain')

    def PUT(self, macaddr):
        if re.match("^[0-9a-fA-F]{12}$", macaddr) == None:
            raise cherrypy.HTTPError("404 Not Found")
        log = open(os.path.join(options.basedir, 'log',
            macaddr + "." + str(time.time())), 'w')
        log.write(str(cherrypy.request.body.read(), errors='replace'))

if __name__ == '__main__':
    parser = OptionParser(usage="usage: %prog [options]")
    parser.add_option("-p", type="int", dest="port", default=80,
                      help="the port on which to listen")
    parser.add_option("-u", type="string", dest="uid", default=None,
                      help="a user (or uid) to switch to")
    parser.add_option("-g", type="string", dest="gid", default=None,
                      help="a grouo (or gid) to switch to")
    parser.add_option("-d", type="string", dest="basedir", default="/var/kayak",
                      help="root of kayak images");
    current_dir = os.path.dirname(os.path.abspath(__file__))
    (options, args) = parser.parse_args()
    # Set up site-wide config first so we get a log if errors occur.
    cherrypy.config.update({'environment': 'production',
                            'log.screen': True,
                            'server.socket_host': '0.0.0.0',
                            'server.socket_port': options.port,
                           })

    conf = {'/': { 'request.dispatch': cherrypy.dispatch.MethodDispatcher(), },
            '/css': {'tools.staticdir.on': True,
                    'tools.staticdir.dir':
                        os.path.join(options.basedir, 'css')},
            '/img': {'tools.staticdir.on': True,
                     'tools.staticdir.dir':
                         os.path.join(options.basedir, 'img')},
            '/kayak': {'tools.staticdir.on': True,
                      'tools.staticdir.content_types': {'': 'text/plain'},
                      'tools.staticdir.dir':
                          os.path.join(options.basedir, 'kayak')}}
    root = Root(options)
    root.kayaklog = KayakLog(options)
    if options.uid != None or options.gid != None:
        DropPrivileges(cherrypy.engine,
                       uid=options.uid, gid=options.gid).subscribe()
    cherrypy.quickstart(root, '/', config=conf)

# Vim hints
# vim:ts=4:sw=4:et:fdm=marker
